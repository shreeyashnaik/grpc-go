HTTP 1.1                 vs         HTTP 2
Uncompressed headers              Binary compressed
One TCP conn/request              One TCP conn for multiple req/resp
                                  Multiplexing (server-client parallel msgs over one TCP conn)
                                  Server Push
                                  SSL


TYPES of API in GRPC

service GreetService {
  // 1. Unary (Client one -> Server one)
  rpc Greet(GreetRequest) returns (GreetResponse) {};

  // 2. Server streaming
  rpc Greet(GreetRequest) returns (stream GreetResponse) {};

  // 3. Client streaming
  rpc Greet(stream GreetRequest) returns (GreetResponse) {};

  // 4. Bi directional streaming
  rpc Greet(stream GreetRequest) returns (stream GreetResponse) {};
}



SCALABILTY in GRPC:
SERVER SIDE: Async (main thread is not blocked and server can handle multiple requests in parallel.)
CLIENT: Freedom Async/Blocking

Google: 10 B requests/sec using GRPC


SECURITY in GRPC:
Schema based serialization, 
SSL certificates initializations, 
Interceptors for Auth
  

GRPC                   vs              REST
Protocol Buffers (strict type)       JSON (dynamic type)
Streaming                            Unary
Bi directional                       Client -> Server
Free design                          GET/POST/UPDATE/DELETE

Reqs:
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2

GRPC use-case:
1. Google internally.
2. Google externally 
  (GCP Spanner (https://github.com/googleapis/googleapis/blob/master/google/pubsub/v1/pubsub.proto), 
  GCP Pub/Sub (https://github.com/googleapis/googleapis/blob/master/google/pubsub/v1/spanner.proto)) 

Important links:
1. Example Implementations: https://github.com/grpc/grpc-go/tree/master/examples
2. APIs: https://grpc.io/docs/languages/go/api/
3. src-code: https://github.com/grpc/grpc-go